# 3.2.1 Descriptive Statistics
print(df.describe())

# 3.2.2. Check for Missing Values
print(df.isnull().sum()) # Check for missing values in each column

# 3.2.3. Target Variable Distribution (Class)
print(df['Class'].value_counts(normalize=True)) # Show the percentage of fraud and legitimate transactions

# Visualize Target Variable Distribution
plt.figure(figsize=(6, 4))
sns.countplot(x='Class', data=df)
plt.title('Distribution of Transaction Classes')
plt.xlabel('Class (0: Legitimate, 1: Fraudulent)')
plt.ylabel('Count')
plt.show()

# 3.2.4. Visualize 'Amount'
plt.figure(figsize=(8, 6))
sns.histplot(df['Amount'], bins=50)
plt.title('Distribution of Transaction Amount')
plt.xlabel('Amount')
plt.ylabel('Frequency')
plt.show()

# 3.2.5. Visualize 'Time'
plt.figure(figsize=(8, 6))
sns.histplot(df['Time'], bins=50)
plt.title('Distribution of Transaction Time')
plt.xlabel('Time (seconds)')
plt.ylabel('Frequency')
plt.show()

# 3.2.6. Relationship between Amount and Class
plt.figure(figsize=(8, 6))
sns.boxplot(x='Class', y='Amount', data=df)
plt.title('Transaction Amount vs. Class')
plt.xlabel('Class')
plt.ylabel('Amount')
plt.show()

# 3.2.7. Correlations (Using Heatmap)
correlation_matrix = df.corr()
plt.figure(figsize=(12, 10))
sns.heatmap(correlation_matrix, cmap='coolwarm', annot=False, fmt=".2f") # annot=True to show values
plt.title('Correlation Heatmap')
plt.show()


Explanation:
df.describe() provides summary statistics (count, mean, standard deviation, min, max, percentiles) for numerical columns.
df.isnull().sum() checks for missing values in each column. This is a critical step.
df['Class'].value_counts(normalize=True) gives the distribution of the target variable ("Class"). normalize=True calculates percentages. This is very important to see if the classes are imbalanced (which they likely are in this fraud detection dataset).
We create several plots:
sns.countplot() shows the distribution of the 'Class' variable (fraud vs. non-fraud)
sns.histplot() visualizes the distributions of 'Amount' and 'Time'.
sns.boxplot() compares the 'Amount' across the two classes (fraud and non-fraud). This is to check if there are any apparent differences in the Amount between them.
df.corr() computes the correlation matrix. sns.heatmap() visualizes this matrix, showing how each feature correlates with every other feature. This helps identify features that might be highly predictive of fraud (and those that are redundant).
